[{"content":"GitHub Actions が使用できるようになったためいままで使用していた CircleCI から変更してみました。\n設定 とりあえず設定を晒しておきます\nname: Build and Deploy on: [push, pull_request, repository_dispatch] jobs: main: name: Build and deploy runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 with: fetch-depth: 1 - name: Download theme run: git clone -b master --single-branch --depth=1 https://github.com/ress997/hugo-ran.git themes/ran - name: Download hugo run: | VERSION=$(curl --silent \u0026quot;https://api.github.com/repos/gohugoio/hugo/releases/latest\u0026quot; | grep '\u0026quot;tag_name\u0026quot;:' | sed -E 's/.*\u0026quot;v([^\u0026quot;]+)\u0026quot;.*/\\1/') wget \u0026quot;https://github.com/gohugoio/hugo/releases/download/v${VERSION}/hugo_extended_${VERSION}_Linux-64bit.tar.gz\u0026quot; -O hugo.tar.gz tar xzf hugo.tar.gz hugo rm -rf hugo.tar.gz - name: Build run: ./hugo --minify - name: Cache node_modules uses: actions/cache@preview if: github.event_name == 'repository_dispatch' || (github.ref == 'refs/heads/master' \u0026amp;\u0026amp; github.event_name != 'pull_request') with: path: ~/.cache/yarn key: ${{ runner.os }}-projectname-${{ github.sha }} restore-keys: ${{ runner.os }}-projectname- - name: Install firebase-tools if: github.event_name == 'repository_dispatch' || (github.ref == 'refs/heads/master' \u0026amp;\u0026amp; github.event_name != 'pull_request') run: yarn add firebase-tools - name: Push file to Firebase Hosting if: github.event_name == 'repository_dispatch' || (github.ref == 'refs/heads/master' \u0026amp;\u0026amp; github.event_name != 'pull_request') env: FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }} run: yarn run deploy 私の環境ではデプロイ先として Firebase Hosting を使用しているのでそれぞれ自分が使用しているデプロイ先へ変更してください\n詳細 それぞれの設定項目日ついて説明していこうと思います\non CI を使用するものを制限しますが push と pull_request を指定しています。\nrepository_dispatch では api を使用してCIを動かすことができるので追加しています。\nバージョン指定 VERSION の部分で GitHub API を使用して Hugo の最新バージョンを取得しています。\ncache firebase を使用している関係で npm を取得するのを高速化するために Actions のキャッシュ機能を使用しています。\nif github.event_name で使用するものを制限します。\ngithub.ref では使用するブランチを制限しています。\n今回 if で制限している内容としては repository_dispatch のときと master ブランチが更新されたときに動作するようにしています。\nsecrets 設定画面に入力したものを使用する場合呼び出す必要があります。\nCircleCI では環境変数を使用していたため、環境変数として展開しています。\nrepository_dispatch 上記にも述べた通りこれを設定しておくことで GitHub API を使って webhook として使用できます。\ncurl -XPOST -u \u0026quot;ress997:${TOKEN}\u0026quot; -H \u0026quot;Accept: application/vnd.github.everest-preview+json\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; https://api.github.com/repos/ress997/blog/dispatches --data '{\u0026quot;event_type\u0026quot;: \u0026quot;html.preview\u0026quot;}' 上記のようなすることによってイベントを発火することができます。\nまとめ CircleCI から GitHub Actions に変更してみましたが思っていたよりかんたんにできました。\nただこれを書いていて if がどんどん長くなっていくことが大変でまとめて設定できるようになったらもっと便利になると思います。\n","date":"2019-12-03T12:38:16+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/ci-chenge/thumbnail.png","permalink":"https://ress.39.gy/post/ci-chenge/","title":"ブログのビルドをCircleCIからGitHub Actionsに変更した"},{"content":"メインで使用している楽天電話より新規に発売された OPPO Reno A 128GB を購入しました。\n今回この端末を買った決め手は おサイフケータイ と DSDV に対応し、3万円以下と安く買えたからです。\nスペック    項目 内容     本体サイズ 約158.4 x 約75.4 x 約7.8 (mm)   画面サイズ 約6.4インチ   質量 約169.5g   CPU Qualcomm® Snapdragon™ 710/オクタコア 2.2GHz + 1.7G   OS Color OS 6 (Android™ 9 Pie ベース)   RAM 6GB   ROM 128GB   バッテリー容量 約3,600mAh    公式より引用\n比較 大きさが近い iPhone 11 Pro Max と比較してみたいと思います。\nサイズはほぼ同じとなっておりだいぶ大きいです\nしかし iPhone 11 Pro Max より OPPO Reno A のほうが軽く手で持ち上げていてもそこまで負担になりませんでした\n","date":"2019-10-16T06:14:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/oppo-reno-a-128gb/thumbnail.png","permalink":"https://ress.39.gy/post/oppo-reno-a-128gb/","title":"OPPO Reno A 128GB を購入しました"},{"content":"アメブロなどで有名なサイバーエージェントの Intel NUCで始めるおうちKubernetesクラスタで自宅サーバ入門 に参加してきました。\nもともと Raspberry Pi のおうち Kubernetes は知っていたため今回も Raspberry Pi を使用するのかな？と思ってたら Intel NUC を使用しとても楽しかったです。\n追記: ブログの再構築時にデータが消えてしまっていたので書き直しました\nきっかけ もともとサイバーエージェントのインターンに行こうと思い違うインターンに応募してましたがそれが落選してしまいましたがこのインターンに案内されました。\nKubernetes はもともと興味があり色々と勉強しているところだったためちょうどよかったと思います。\nやったこと おうち Kubernetes ということだったため Keycloak を使用したグループウェアを構築しました。\n普段使っている Gitea, GROWI, minio などをグループウェアとして使用するときにそれぞれ認証するのが大変なため統一して使いやすいようにしようとしました。\nhttps://github.com/ress997/nuc-k8s に2日間でやったことのファイルをおいています。\n感想 他の人がいろいろとやっていたことに気になる技術があったため後日調べ便上になりました。\nインターン期間中に Keycloak を使用し色々と使用していくとメモリが足りなくなりインターン1日目終了後に急いで秋葉原に行きメモリを買いに行くなどやり目立ちましたがそれでも2日間で多くのことを学べたと思います。\n追記: 気になった技術を追加しました。\n気になった技術  kubevirt argocd Calico Kubernetes Cluster Federation  事前に勉強した資料  Kubernetes完全ガイド Learn Kubernetes using Interactive Browser-Based Scenarios KubernetesのDiscovery＆LBリソース（その1） KubernetesのWorkloadsリソース（その2） ","date":"2019-09-25T13:23:37+09:00","permalink":"https://ress.39.gy/post/intern-sa-k8s/","title":"サイバーエージェントのインターンに行ってきました"},{"content":"今回 HP から発売されている HP Chromebook x360 14 のエグゼクティブモデル (i5 モデル) を購入しました。\n今回スーペリアモデル (i3 モデル) ではなくエグゼクティブモデル (i5 モデル) を買ったのかなど書いていこうと思います。\n今回購入にあたって国内限定など指定が私にはあったのであくまでも参考程度にお願いします。\n購入までの経緯 Chrome OS では Android アプリが使用できまだベータ版ですが Linux が使用できるので、普段やっていることが Chrome OS でも可能だと思い Chromebook を選ぶことにしました。\nそこで最初に目をつけたのが ASUS Chromebook Flip C434TA でした。\nしかし C434TA のスペック を見てみると性能が飛躍的にアップした第8世代ですが m シリーズを使用しメモリが LPDDR3 だったりと古めの構成となっていました。\nそこで他の機種などを調べていく有為に出会ったのが HP Chromebook x360 14 でした。\n80周年記念セール で安くなっており C434TA とほぼ同じ値段で性能が良くなるのであればと思い今回選びました。\n普段からパソコンでは調べるときなど数十単位でタブを使用していることも多く開発関係も行う予定だったため上位のエグゼクティブモデルを購入しました。\nレビュー HP Chromebook 13 G1 を1週間ほどですが使用していました。\nHP Chromebook 13 G1 と比べて最初に感じるのはやはり HP Chromebook x360 14 のほうが重たく感じます。\nしかし機能性を見てみると左右に充電可能な Type-C ソケットが存在しバックスペースの上に存在した電源ボタンがロックボタンに変更されました。\n今まで iPhone iPad PC など複数持ち運び目的によって使い分けていました。そんな環境のなか HP Chromebook 13 G1 を使用していると、タッチディスプレイや360度回転もしなかったためタブレットとパソコンの中間的な扱いでした、\nしかし今回のレビュー記事を書くにあたって軽く触ってみた結果メインパソコンとして使用してもいいぐらい快適に使用できています。\n比較 今まで現役で使用していた Macbook Pro 13 と比較したいと思います\nMacbook より大きいですが軽く持ち運びに苦にならなかったです\n結論 ASUS の C434TA よりも高性能でハイスペックな Chromebook をメインのノートパソコンとして選ぶのであればおすすめだと思います！\n","date":"2019-09-10T09:27:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/hp-chromebook-x360-14/thumbnail.png","permalink":"https://ress.39.gy/post/hp-chromebook-x360-14/","title":"HP Chromebook x360 14 を購入しました"},{"content":"大学3年生となり、就活をそろそろ考え始めないといけない時期になりました。\nそこで実際の現場を体験してみたいなどの理由からインターンに応募し Pepabo の夏のインターンに参加することができました。\nそこではロリポップのマネージドクラウドに配属されました。\nありがたいことにインターン用の課題が用意されていましたが、メンターの方と相談した結果マネージドクラウドで使用されているユーザー用コンテナイメージの DevSecOps に挑戦しました。\nDevSecOps バージョンの更新やパッチの適用などが行われるとユーザー用コンテナイメージを開発者が手元のパソコンでビルドし本番環境に適用していました。\nそこで私はまずマネージドクラウドで提供されているイメージごとにビルドを GitHub Actions を使用しペパボで利用している Docker レジストリにデプロイできるようにしました。\n他にも共通部分の切り出しや Trivy, Dockle の導入、slackに通知するように変更しました。\n今回使用した GitHub Actions ですが 先日更新され ドキュメントや他の知見を探すのが大変でした。\n在宅勤務 インターン期間中に令和元年8月九州北部豪雨によって在宅勤務することになりました。\nインターンで在宅勤務ができるという贅沢な？体験でしたが思っていた以上に在宅勤務は楽でいい経験になったと思います。\nネーミング ペパボのサービスですがムームードメインやロリポップなどユニークなネーミングしています。\nしかし私が関わったプロジェクトではコードネームが福岡の地名を使用していたので最初なにがどのサービスなのかわからず関係図を書きましたw\nイベントに参加しました せっかく福岡に行ったので勉強会などにも参加したいなぁと思い2つ参加しました\n Go 1.13 Release Party NaITE もぐもぐ会 in 2019-08  もくもく会ではなくもぐもぐ会とリリースパーティーに行きましたが思っていた以上にペパボ社員率が高くびっくりしました。\n福岡の言語系勉強会はペパボの社員がやってることが多くイベントに積極的な体勢がすごいと思いました。\n","date":"2019-09-05T16:25:05+09:00","permalink":"https://ress.39.gy/post/intern-pepabo/","title":"GMO ペパボのインターンに参加してきました"},{"content":"開発に Docker を使う機械が増えてきましたが使っててきになるのがセキュリティです。\nそこで Docker をセキュアに使うためにも自分ようのメモも兼ねて書いておきます。\nまず root 権限で docker グループにパスワードを設定します。\nsudo gpasswd docker 一時的に docker を使いたいユーザーを Docker グループに参加します\nnewgrp docker これで sudo を使わず Docker を使えます!\n","date":"2019-08-06T11:07:12+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/docker-secure/thumbnail.png","permalink":"https://ress.39.gy/post/docker-secure/","title":"Docker をセキュアに使うために"},{"content":"Arch Linux を使用しててパッケージが増えすぎたので整理も兼て選定しました。\nSystem 今回パッケージを選ぶときに python2, qt4, qt5, gtk2 を使用しないようにしました。\nCore  intel-ucode linux-zen yay-bin  今回は ZEN Kernel を使用しインテルのマイクロコードなどを追加しました\nLib  btrfs-progs exfat-utils libsecret libu2f-host libxss aic94xx-firmware wd719x-firmware  Yubikey や Btrfs などのドライバを追加しました。\nBase  wayland  xorg-server-xwayland    いままで wayland を試したことがなかったので導入します。 動かないアプリが発生しないように xwayland も導入しておきます。\n rescached-git  DNS のクリエを標準のままではキャッシュしてくれないので導入しました。\n xdg-user-dirs  XDG ユーザーディレクトリに従ってディレクトリ構造を共通化したいため導入します\n usb_modeswitch  前回記事にも書きましたがモバイルルーターを接続するために入れます。\n  intel-media-driver\n  ttf-noto-fonts-simple\n  ttf-twemoji-color\n  mailcap-mime-types\n  xdg-utils\n  pulseaudio\n  pulseaudio-alsa\n  GUI   adwaita-icon-theme\n  arc-gtk-theme\n  arc-icon-theme\n  gsettings-desktop-schemas-git\n  gtk3-mushrooms\n  numix-cursor-theme\n  sway\n swaylock waybar    Tools  fcitx5-anthy-git  enchant-pure    IME\n light  ディスプレイの明るさ\n mako  通知\n wl-clipboard  クリップボード\n rofi rofi-dmenu  ランチャー\n grim  slurp    スクショ\nApp  opera  profile-sync-daemon    ブラウザ! profile-sync-daemon を使って高速化\n pavucontrol  音量ミキサー\n pcmanfm-gtk3  gvfs    ファイラー\n vimiv  libgexiv2    画像ビューア\n xarchiver  p7zip unrar unzip zip    展開!\n deadbeef  音楽プレイヤー\nNet  connman-git  iwd-git   connman-gtk  netctl でもいいのですが iwd を使用したかったので\nDev  zsh  zsh 派なので\n go nodejs-lts-dubnium  yarn    開発に使用する言語もインストール\n bat exa fd fzy ghq-bin ripgrep tig  便利な cli で動くツールたち\n docker-bin docker-compose-bin kind-bin kubectl-bin  仮想化関係も入れておきます\n alacritty  ターミナル\n google-chrome-dev  最新の変更を調査するためと開発ツールが便利なので\n neovim  python-neovim    エディタ! 昔は Vim でした\u0026hellip;\n openssh  ssh しようと思ったら存在しないと起こられたことがあるので明示してインストールしてます。\n yaskkserv  eskk.vim で仕様してます。\netc.  keybase seahorse-git  たまーに使うツール\n","date":"2019-07-10T14:29:50+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/paclist-v1/thumbnail.png","permalink":"https://ress.39.gy/post/paclist-v1/","title":"Arch Linux パッケージを選定した"},{"content":"タイトルの通り GitHub のアカウントを @39e から @ress997 に変更しました。\n以前まで使用してた @39e ですが一時的にログインできなくなり使用ができませんでした。\nそこで自分で Gitea を運用してました。\nしかし GitHub のほうがサードパーティ製ツールが充実しており、使いやすかったため GitHub に戻ってきました。\n以前のアカウントはログインできるようになりましたが GitHub 側から\n 新しくアカウントを作ってたりしたのであれば使わないアカウントを消してくれ\n と言われたため @39e を消し @ress997 を使うことにしました。\n","date":"2019-05-28T21:32:48+09:00","permalink":"https://ress.39.gy/post/change-github-account/","title":"github のアカウントを変更しました"},{"content":"今まで vim でファイラーを使うとなったときに NERDtree しか使ってませんでしたが @Shougo さんがまた使いやすファイラーを作ったいたので紹介したいと思います。\nvim ではなく neovim を使っています。またプラグイン管理には dein.vim を使用してます。各自自分が使用してる環境に読み替えて使用してください。\n設定 私は toml ファイルで管理しています。下記のように書くことでプラグインを追加できます\n[[plugins]] repo ='Shougo/defx.nvim' on_cmd = 'Defx' hook_add = ''' nnoremap \u0026lt;silent\u0026gt; \u0026lt;Space\u0026gt;f :\u0026lt;C-u\u0026gt;Defx -listed -resume -buffer-name=tab`tabpagenr()`\u0026lt;CR\u0026gt; ''' 私は \u0026lt;Space\u0026gt;f で開けるようにしてるので人によっては書き換えてください。\nカスタマイズ vscode みたいにファイルアイコンを表示したり NERDtree でもやってましたが Git の変更などを表示したかったためプラグインを追加して使ってます。\nファイルアイコン表示するために defx-icons\nGit の変更を表示するために defx-git\nを使ってます。標準でアイコンを表示したいので下記のように設定します。 (また隠しファイルも標準で表示してほしいのでその設定も追記してます)\ncall defx#custom#option('_', { \\ 'columns': 'indent:git:icons:filename', \\ 'show_ignored_files': 1, \\ }) カスタマイズを更に行いうとこんな感じにできます！\n設定例 私の設定は GitHub にアップ してるので最新はそちらを確認してください\n[[plugins]] repo =\u0026#39;kristijanhusak/defx-icons\u0026#39; [[plugins]] repo =\u0026#39;kristijanhusak/defx-git\u0026#39; hook_add = \u0026#39;\u0026#39;\u0026#39; let g:defx_git#indicators = { \\ \u0026#39;Modified\u0026#39; : \u0026#39;+\u0026#39;, \\ \u0026#39;Staged\u0026#39; : \u0026#39;●\u0026#39;, \\ \u0026#39;Untracked\u0026#39; : \u0026#39;?\u0026#39;, \\ \u0026#39;Renamed\u0026#39; : \u0026#39;➜\u0026#39;, \\ \u0026#39;Unmerged\u0026#39; : \u0026#39;═\u0026#39;, \\ \u0026#39;Deleted\u0026#39; : \u0026#39;x\u0026#39;, \\ \u0026#39;Unknown\u0026#39; : \u0026#39;?\u0026#39; \\ } \u0026#39;\u0026#39;\u0026#39; [[plugins]] repo =\u0026#39;Shougo/defx.nvim\u0026#39; on_cmd = \u0026#39;Defx\u0026#39; depends = [\u0026#39;defx-icons\u0026#39;, \u0026#39;defx-git\u0026#39;] hook_add = \u0026#39;\u0026#39;\u0026#39; nnoremap \u0026lt;silent\u0026gt; \u0026lt;Space\u0026gt;f :\u0026lt;C-u\u0026gt;Defx -listed -resume -buffer-name=tab`tabpagenr()`\u0026lt;CR\u0026gt; \u0026#39;\u0026#39;\u0026#39; hook_source = \u0026#39;\u0026#39;\u0026#39; function! Root(path) abort return fnamemodify(a:path, \u0026#39;:t\u0026#39;) endfunction call defx#custom#source(\u0026#39;file\u0026#39;, { \\ \u0026#39;root\u0026#39;: \u0026#39;Root\u0026#39;, \\}) call defx#custom#column(\u0026#39;filename\u0026#39;, { \\ \u0026#39;directory_icon\u0026#39;: \u0026#39;\u0026#39;, \\ \u0026#39;opened_icon\u0026#39;: \u0026#39;\u0026#39;, \\ }) call defx#custom#column(\u0026#39;mark\u0026#39;, { \\ \u0026#39;readonly_icon\u0026#39;: \u0026#39;✗\u0026#39;, \\ \u0026#39;selected_icon\u0026#39;: \u0026#39;✓\u0026#39;, \\ }) call defx#custom#option(\u0026#39;_\u0026#39;, { \\ \u0026#39;columns\u0026#39;: \u0026#39;indent:git:icons:filename\u0026#39;, \\ \u0026#39;show_ignored_files\u0026#39;: 1, \\ }) \u0026#39;\u0026#39;\u0026#39; [plugins.ftplugin] defx = \u0026#39;\u0026#39;\u0026#39; nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; ~ defx#async_action(\u0026#39;cd\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; h defx#async_action(\u0026#39;cd\u0026#39;, [\u0026#39;..\u0026#39;]) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; j line(\u0026#39;.\u0026#39;) == line(\u0026#39;$\u0026#39;) ? \u0026#39;gg\u0026#39; : \u0026#39;j\u0026#39; nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; k line(\u0026#39;.\u0026#39;) == 1 ? \u0026#39;G\u0026#39; : \u0026#39;k\u0026#39; nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; l defx#async_action(\u0026#39;open\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; . defx#do_action(\u0026#39;toggle_ignored_files\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;Tab\u0026gt; winnr(\u0026#39;$\u0026#39;) != 1 ? \u0026#39;:\u0026lt;C-u\u0026gt;wincmd w\u0026lt;CR\u0026gt;\u0026#39; : \u0026#39;:\u0026lt;C-u\u0026gt;Defx -buffer-name=temp -split=vertical\u0026lt;CR\u0026gt;\u0026#39; nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;Space\u0026gt; defx#do_action(\u0026#39;toggle_select\u0026#39;) . \u0026#39;j\u0026#39; nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;CR\u0026gt; defx#do_action(\u0026#39;open\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; q defx#do_action(\u0026#39;quit\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; o defx#async_action(\u0026#39;open_or_close_tree\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; O defx#async_action(\u0026#39;open_tree_recursive\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; ! defx#do_action(\u0026#39;execute_command\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; * defx#do_action(\u0026#39;toggle_select_all\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-g\u0026gt; defx#do_action(\u0026#39;print\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;C-l\u0026gt; defx#do_action(\u0026#39;redraw\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; E defx#do_action(\u0026#39;open\u0026#39;, \u0026#39;vsplit\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; K defx#do_action(\u0026#39;new_directory\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; M defx#do_action(\u0026#39;new_multiple_files\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; N defx#do_action(\u0026#39;new_file\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; P defx#do_action(\u0026#39;open\u0026#39;, \u0026#39;pedit\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; S defx#do_action(\u0026#39;toggle_sort\u0026#39;, \u0026#39;Time\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; c defx#do_action(\u0026#39;copy\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; d defx#do_action(\u0026#39;remove_trash\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; m defx#do_action(\u0026#39;move\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; p defx#do_action(\u0026#39;paste\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; r defx#do_action(\u0026#39;rename\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; se defx#do_action(\u0026#39;save_session\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; sl defx#do_action(\u0026#39;load_session\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; x defx#do_action(\u0026#39;execute_system\u0026#39;) nnoremap \u0026lt;silent\u0026gt;\u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; yy defx#do_action(\u0026#39;yank_path\u0026#39;) \u0026#39;\u0026#39;\u0026#39; dein.vim の機能ですが autocmd FileType defx call s:defx_my_settings() みたいな記述は [plugins.ftplugin] を使うとわかりやすく書けるのでぜひ使ってください。\nあとがき defx.nvim についてしらべると @takkii さんの記事しかありませんでした。\nそこでカスタマイズ性の高い defx.nvim を使ってほしいです！\n","date":"2019-05-23T21:26:25+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/defx/thumbnail.png","permalink":"https://ress.39.gy/post/defx/","title":"Defx.nvim を使う!"},{"content":"以前まで使用してたブログテーマの robust ですが気がつくと メンテナンスを中止 たので 改良テーマ も作ってたこともありメンテナンスをしようと思いました。\n日本で hugo のことについて調べると robust を使ってる事例をよく見ます。\nそこで他の人も行っていますが改良をしたらもっと使いやすくなるのではないかと rerobust として改良してました。 (更に改良を行い後方互換性をなくしたため新たにテーマを独立させた wolke も作りました。)\nメンテナンスが中止 されたけど 残ってるバグ が存在したりみんなにもっと使ってほしかったこともあり メンテナー になりました。\nこんな機能がほしい や ここはこうしたほうが見やすい など意見がありましたら GitHub などで教えてください!\n","date":"2019-05-13T23:42:54+09:00","permalink":"https://ress.39.gy/post/robust-maintainer/","title":"Robust のメンテナーになりました"},{"content":"今回は利用料金が安くなった Amazon Lightsail を使って Pleroma インスタンスを建ててみたいと思います。 ついでに最近利用できるようになった Amazon S3 にメディアを保存する機能も使用します。\n自分がやったことを軽くまとめただけなので足りない情報など各自補ってください\nTL;DR  Amazon Lightsail  OS: Ubuntu LTS 16.04.5   Amazon S3  Static website hosting 有効化すること    Setup 事前に必要なものをインストールしていきます。 ついでにタイムゾーンと言語設定を日本に変更します。\napt update apt -y dist-upgrade apt -y autoremove apt -y install language-pack-ja update-locale LANG=ja_JP.UTF-8 ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime dpkg-reconfigure --frontend noninteractive tzdata apt -y install git build-essential openssl ssh sudo Caddy 今回リバースプロキシには Caddy を使用します。 Caddy は自動的に Let’s Encrypt で HTTPS を使用する HTTP/2 対応のウェブサーバーです。\ncurl https://getcaddy.com | bash -s personal chown root:root /usr/local/bin/caddy chmod 755 /usr/local/bin/caddy setcap \u0026#39;cap_net_bind_service=+ep\u0026#39; /usr/local/bin/caddy # グループ・ユーザーが存在しない場合のみ実行してください。 # グループ一覧: /etc/group # ユーザー一覧: /etc/passwd groupadd --system -g 33 www-data useradd \\  -g www-data --no-user-group \\  --home-dir /var/www --no-create-home \\  --shell /usr/sbin/nologin \\  --system --uid 33 www-data # 使用するフォルダを用意します mkdir -p /etc/caddy chown -R root:root /etc/caddy mkdir -p /etc/ssl/caddy chown -R root:www-data /etc/ssl/caddy chmod 770 /etc/ssl/caddy # 設定ファイルを作成します # domain.tld など実際に使用する環境に合わせて変更してください cat \u0026lt;\u0026lt;EOL \u0026gt; /etc/caddy/Caddyfile http:// { gzip root /var/www/html } social.domain.tld { gzip tls social@domain.tld proxy / localhost:4000 { websocket transparent } } EOL # 公開用フォルダを作成します mkdir -p /var/www/html cat \u0026lt;\u0026lt;EOL \u0026gt; /var/www/html/index.html \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; EOL chown -R www-data:www-data /var/www chmod 555 /var/www # systemd を設定します curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service chown root:root /etc/systemd/system/caddy.service chmod 644 /etc/systemd/system/caddy.service systemctl daemon-reload systemctl start caddy.service systemctl enable caddy.service サーバーはこれで用意できるのであとポート設定などは各自調べてください\npostgresql データベースをインストールします。 今回は PostgreSQL 10 を使います。\ncat \u0026lt;\u0026lt;EOL \u0026gt; /etc/apt/sources.list.d/pgdg.list deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main EOL wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - apt update apt install postgresql-10 postgresql-contrib-10 Elixir/Erlang Pleroma を実行する Elixir/Erlang をインストールします。\nwget -P /tmp/ https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb \u0026amp;\u0026amp; sudo dpkg -i /tmp/erlang-solutions_1.0_all.deb apt update apt -y install elixir erlang-dev erlang-parsetools erlang-xmerl erlang-tools pleroma ユーザーを追加しソースコードを git でダウンロードします。\nadduser pleroma usermod -aG sudo pleroma su pleroma cd ~ git clone https://git.pleroma.social/pleroma/pleroma cd pleroma/ 依存関係をダウンロードします\nmix deps.get 設定ファイルを作成します\n# まずは自動生成 mix generate_config cp config/generated_config.exs config/prod.secret.exs config/prod.secret.exs を次項のサンプルを例に編集します\nvi config/prod.secret.exs データベースの設定をします\nsudo su postgres -c \u0026#39;psql -f config/setup_db.psql\u0026#39; MIX_ENV=prod mix ecto.migrate sample config 見やすいように私は設定の順序を変更してます\nuse Mix.Config config :pleroma, Pleroma.Web.Endpoint, url: [host: \u0026#34;インスタンスURL\u0026#34;, scheme: \u0026#34;https\u0026#34;, port: 443], secret_key_base: \u0026#34;なんとか\u0026#34; config :pleroma, Pleroma.Repo, adapter: Ecto.Adapters.Postgres, username: \u0026#34;pleroma\u0026#34;, password: \u0026#34;なんとか\u0026#34;, database: \u0026#34;pleroma_dev\u0026#34;, hostname: \u0026#34;localhost\u0026#34;, pool_size: 10 config :pleroma, :instance, name: \u0026#34;インスタンス名\u0026#34;, email: \u0026#34;メールアドレス\u0026#34;, dedupe_media: false, limit: 5000, registrations_open: true # limit は文字数制限です # registrations_open は新規登録するかの設定です config :pleroma, :media_proxy, enabled: false, redirect_on_failure: true # 今回東京リージョンのS3を使います config :ex_aws, :s3, access_key_id: \u0026#34;XXXXXXXXXXXX\u0026#34;, secret_access_key: \u0026#34;YYYYYYYYYYYYYYYYYYYYY\u0026#34;, region: \u0026#34;ap-northeast-1\u0026#34;, scheme: \u0026#34;https://\u0026#34; config :pleroma, Pleroma.Uploaders.S3, bucket: \u0026#34;bucket名\u0026#34;, public_endpoint: \u0026#34;s3.dualstack.ap-northeast-1.amazonaws.com\u0026#34; # この部分でアップロード先をS3に変更します config :pleroma, Pleroma.Upload, uploader: Pleroma.Uploaders.S3 # 各機能の有効化します config :pleroma, :fe, show_instance_panel: true, scope_options_enabled: true, collapse_message_with_subject: true config :pleroma, :suggestions, enabled: true 設定についてはまた今度まとめたいと思います\nsystemd systemd を設定します\ncp /home/pleroma/pleroma/installation/pleroma.service /etc/systemd/system/pleroma.service /etc/systemd/system/pleroma.service の Environment と書いてる下に Environment=\u0026quot;MIX_ENV=prod\u0026quot; を追記します\nrun systemctl enable --now pleroma.service\n補足説明 今回コピペするとすべて用意できるように cat コマンドを使ってファイルを作成してます。\ncat \u0026lt;\u0026lt;EOL \u0026gt; 書き込む対象のファイル ファイルの内容 EOL # 書き込み終了 ","date":"2018-10-08T20:45:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/pleroma/thumbnail.png","permalink":"https://ress.39.gy/post/pleroma/","title":"Amazon Lightsail に Pleroma をインストールしてみた"},{"content":"Google Cloud Platform を使用していく上でハマった点などを書いていきます。\n今後もハマった点があれば追加していく予定です。\n有料アカウントへアップグレード 1週間前メールによる通知がありましたが後回しした結果忘れてました。\n結果無料期間終了後使用してるサービスがすべて強制終了されました。\n使用していない静的IPアドレスが課金される ここは AWS と同じで使用してない静的IPアドレスを確保してる場合は課金されます。\nインスタンスは削除しても残ってる場合があるので注意が必要です。\n中国とオーストラリアからのアクセスは別料金が発生する 無料枠以内に抑えるためには中国とオーストラリアからのアクセスは注意が必要です。\n主に中国からの DDoS によって数ヶ月間 900円/月 発生してました。 (許すまじ)\n調べれば中国のIPアドレス範囲がわかるのでファイヤーウォールでアクセス拒否設定をするといいと思います。\n","date":"2018-09-28T07:00:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/gcp/thumbnail.png","permalink":"https://ress.39.gy/post/gcp/","title":"Google Cloud Platform Tips"},{"content":"forestry.io でサイトを更新するときにちょっと工夫しないと大変な部分があったので紹介していきます!\n今後も更新し追加していく予定です。\nタイムゾーン タイムゾーンを日本に変更します。\n settings を開く TIMEZONE を (GTM+09:00) Osaka に変更する  (バグなのか (GTM+09:00) Tokyo は選べませんでした)\nファイル名 forestry.io で記事を追加するときにタイトルとファイル名の取扱に注意が必要です。\nAdd New ボタンを押し Create Pages で設定する TITLE はファイル名に使用されます。\nそこで slug は英語、タイトルは日本語と分けたい場合は注意が必要です。 上記のタイトルを英語 slug、Front Matter で日本語のタイトルとすることによって分けることができます\n","date":"2018-09-21T12:00:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/forestry/thumbnail.png","permalink":"https://ress.39.gy/post/forestry/","title":"forestry.io Tips"},{"content":"最近ホスティングを変更した関係で 1GB 以上になると料金が発生します。 そこで無料で使用できる画像管理サービスを探しました。\nGyazo や imgix など様々なサービスと比較していった中で cloudinary を使うことにしました。\n特徴  最適な画像形式に自動変換ができる 様々な画像加工ができる 画像の CDN 配信  などがあり無料で 30万枚/10GB まで保存することができます。\n最適な画像形式に変換 cloudinary に保存した写真は以下のような形式で配信されます\nhttps://res.cloudinary.com/\u0026lt;cloud name\u0026gt;/image/upload/\u0026lt;option: 省略可能\u0026gt;/\u0026lt;path\u0026gt;\nこのオプションの部分に f_auto を追加することによって WebP など最適な形式に変換し画像を配信することができます。\nまた、q_auto を追加することによって画像のサイズを最適化することができます。 (ちなみに複数のオプションを書く場合はコンマ区切りで書きます)\n様々な画像加工ができる これも先程のオプション部分に対して書くと可能です。\nCloudinaryを使って画像の変換をやってみるに日本語で詳しく書いてあります。\n画像の CDN 配信  FAST DELIVERY Get your images and videos delivered lightning-fast, responsively and highly optimized for any device in any location. Assets are served via Akamai, Fastly and CloudFront CDN.\n と書いてあるように Akamai と Fastly と CloudFront を使って画像の CDN 配信を行ってくれます。\nCMS と連携 みんな大好き WordPress や私の使ってる forestry.io に対応してます!\nWordPress の場合はアドオンとして対応してます。 アドオンをインストール後 cloudinary にログインすると表示される Account Details の Environment variable を設定することで使えるようになります。\nforestry.io の場合 Media 設定から指定することができます。 (詳しくは 公式ドキュメントに書いてあります)\nさいごに cloudinary によって画像管理を簡単に行うことがます。 ほかにも簡単に画像加工を行ったり、高速に配信されるためおすすめです!\n","date":"2018-09-20T16:00:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/cloudinary/thumbnail.png","permalink":"https://ress.39.gy/post/cloudinary/","title":"cloudinary が便利!"},{"content":"パスワードを管理するのが億劫になって結構前から私はパスワード管理サービスの 1Password を使用してきました。\nしかし、サブスクリプションに移行したことによるコスト発生や、パスワード管理を一任してたことで発生してるセキュリティリスクなどを考えた結果管理体制を変えました。\n1Password が OTP に対応してクラウド同期、全デバイスで使用可能、チームや家族間で共有が楽など便利な機能がたくさんあります。\nしかしよく考えてみるとセキュリティリスクをすべて 1Password に預けています。 また 2FA も同時に管理しているため段階を分けることによるセキュリティの向上も得られません。\nまた今までアプリの買い切りで使用できていた 1Password ですがサブスクリプションに移行したことによってコストが発生するようになったため人によっては負担になります。\nそこで他パスワード管理ソフト・サービスを比較しました。 その中でも一番気に入ったのはオープンソースである KeePass でした。 しかし全デバイスに同期させる手間や鍵の管理など管理して行く上でデメリットが多かったので諦めました。\nそんな中 bitwarden に出会いました。 bitwarden のソースはすべて GitHubにあり、セルフホスティングすることもできるなど魅力的な点が多かったです。\n1要素によって行う2要素認証は1要素認証と変わらないので 1Password で OTP を管理するのを辞めました。\nそのかわり Authy による2要素認証や Yubikey も設定し多要素で認証できるようにしました。 (その結果スマホにパスワードが集中するので取り扱いには気をつけないといけませんが…)\nbitwarden は Web 版と OS インストールソフトとブラウザプラグインがありコマンドラインツールまで要ししてます。\nまた Docker によるセルフホスティング対応など開発者にとって使いやすさが求められた結果が見受けられます。\n料金体制は至ってシンプルで個人で使用するなら Free プランと Premium プランが用意してあります。\n$10/yearで使用することができ主に次のような機能が追加されます。\n$10/yearと安く、bitwarden へアクセスする際 2FA を設定できるのですぐに Premium プランにしましたw\nまた今回体制を見直すにあたって様々なサービスに登録して 120 個ほどあるアカウントを整理できてよかったと思います!\n","date":"2018-09-13T22:34:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/password-management/thumbnail.png","permalink":"https://ress.39.gy/post/password-management/","title":"パスワード管理について考え直してみた"},{"content":"Developers.IO でも紹介されましたが AWS の VPS と言われている Amazon Lightsail がほぼ半額になり(私が知ってる中で)国内最安となりました。\nAmazon Lightsail とは Amazon Lightsail とは AWS の EC2 をより簡単に使えるようにした VPS です。\nEC2 に比べるとファイヤーウォールが貧弱だったりしますが問題なく使えると思います。\nファイヤーウォール EC2 では AWS 側で特定の IP アドレスのみ特定のポート(例: 22番ポート)をアクセス許可するなど柔軟な設定をすることが可能です。 しかし Lightsail では 0.0.0.0 に対して外部からのアクセスに関して特定のポートをを許可するようになってます。\nですが、ConoHa などの他 VPS サービスでも同じように外部からの接続に対して特定のポートを通すようなファイヤーウォールなので問題ないと思います。\nブラウザコンソール Lightsail でも他 VPS のようにブラウザからコンソールを開くことができます。\nしかし他 VPS ではいわいる “サーバーコンソール” ですが Lightsail では SSH コンソールとなってるためなにか問題あったときに “強制的になにかやる” と言ったことができないので注意が必要です。\n料金について Lightsail では他 VPS と同じように停止中でも課金されます。\nまた 公式サイト が執筆時点では古い料金での表示となってるので気をつけてください。 (ちなみに、ログイン後の新規作成画面では新料金になってます)\nまとめ 国内最安となった Lightsail は初心者には難しい部分がありますが、コストパフォーマンス的に優れているのでこれから活用していきたいと思います。\n","date":"2018-08-24T18:16:52+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/amazon-lightsail-cheaper/thumbnail.png","permalink":"https://ress.39.gy/post/amazon-lightsail-cheaper/","title":"Amazon Lightsail が国内最安に"},{"content":"公式ブログ によるとプレミアムをリニューアルし、今まで使えてた一部機能がプレミアム機能となり有料化することが決まりました。\n今まで 今までは Pinterest に回収されたあとプレミアム機能を無料で提供してきました。\nしかし、 Engadget によると Instapaper が Pinterest から独立、今後有料化されると予想されてました。\n今後は 下記の機能が $2.99/月 か $29.99/年 で利用できます。\n Full-text search for all articles in your account (全文検索) Unlimited Notes (無制限のメモ) Text-to-Speech playlists on mobile (テキスト読み上げ) Speed reading to get through all of your articles up to 3x faster (速読) An ad-free Instapaper website (ウェブサイトで広告を表示しない) “Send to Kindle” using a bookmarklet or our mobile apps (ブックマークレットやモバイルアプリ経由の｢Kindleへの送信｣)  カッコの中は私が簡単に訳したものなので間違えがあれば教えてください\n","date":"2018-08-13T09:30:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/instapaper-premium/thumbnail.png","permalink":"https://ress.39.gy/post/instapaper-premium/","title":"instapaper premium がリニューアル 一部機能が有料化"},{"content":"いままで迷走していたブログ環境が現状満足するところまで整えることができたので書きます。\nTL;DR  サイトジェネレーター: Hugo バージョン管理: GitHub ビルド/公開: Netlify CMS: forestry.io  無料で構築する事ができますが私は GitHub の Private や独自ドメインなどを使用してるので多少費用がかかってます。 (と言ってもレンタルサーバーを借りるより格安です。)\nいままでは 経緯をだらだらと書いてるだけなので飛ばしていただいて構いませんw\n(途中ではてなブログなどに浮気したり WordPress に戻ったりしましたがそこは飛ばします)\nWordPress を使い始めた プラグインによる拡張が簡単で事前知識が(ほぼ)なくても使い始めることができるということで WordPress にしました。\nしかしプラグインの入れすぎなどで表示速度が遅くなりストレスがたまるようになりました。\n自作テーマに変更 そこで私は Web 系の勉強にと思い、テーマを自作してみることにしました！\nプラグインの行ってることで、テーマに実装できることは積極的に取り込みました。\nしかし趣味で公開してるサイトなのにサーバー費などのコスト面が負担でした。\n静的サイトジェネレーターに出会う そんななか “無料でサイトを公開できないか” といろいろ調べて GitHub Pages に出会いました。\n当時、良く触っていた Ruby を使えるということだったので使い始めました。\nしかし GitHub Pages では、プラグインを使用できませんでした。そこで CI を組み合わせてビルドした成果物を AWS S3 に配置し、公開するようにしました。\nですが AWS を使用したのでわずかながらもコストが掛かり悩みました。\nNetlify へ変更 そんななかビルドと公開まで行ってくれる Netlify を知りました。\nNetlify を使用することで、公開するサーバー側のコストが無くなりました。\n次に Jekyll の生成速度が遅くなり始めました。どうやら記事数やプラグインによって生成速度が遅くなることを知りました。\nHugo へ変更 趣味のブログなので Jekyll にこだわる必要は無いと今まで作っていたものをすべて捨て Hugo に移りました。\nサイトの表示速度をなるべく高速にしなおかつ Hugo で実装できる AMP HTML なども取り込もうと思い様々なテーマを検討しました。\n(あくまで個人的な意見ですが)全体的にビミョーなテーマが多かったです。その中で一番気に入った Robust をフォークした ReRobust をベースに作成した Wolke を使用してます。\n宣伝: みんなもぜひWolke使ってね!!\nCMS について スマホでサイトを眺めてたときに誤字を見つけてしまいサクッと修正しようと思いましたが、わざわざ GitHub にアクセスして対象のファイルを開き… と行うのがめんd… 大変だったので編集機能を実装できないか調べました。\nNetlify CMS Netlify を紹介してる記事にたまに紹介されて、とりあえず使ってみました。\nしかし本来想定してたスマホでの使用が使い辛く変わりのものを探しました。\nforestry.io 日本語記事がなく初回の設定が大変ですがストレスなく使用で便利です。\n(運用するにあたって注意点などがあるので後日書きます！)\nまとめ 多いときは ¥1000/月 ほどかかってたブログ環境ですが、PV もなくダラダラと趣味の話を書いているブログには今の環境で十分だと思います。\n“毎月コストが発生してるから書かないとと” いう焦燥感もなく、気が向いたときに書けばいいという感覚で、これからも更新していきます！\n 追記: ブログのリニューアルしたことを書きましたが今回 Netlify から Firebase Hosting にお引越ししました\nTL;DR  Netlify がたまに落ちている CDN を使用してるらいしけど遅い もっと柔軟に設定したい  Netlify Netlify は簡単にデプロイでき、小規模なページなどであれば問題がありません。\nしかし、配信の最適化するために HTTP ヘッダなどをいじるとき少々手間がかかり大変でした。\nそして、接続障害が発生したり、SSL エラーが発生したのでちょっとインフラに不安を感じ始めました。\nFirebase そこで、Firebase Hosting を使い始めました。\nFirebase は Fastly を採用してるので世界各地にある CDN から配信されレスポンスが高速になりました。\nまた、 Firebase を導入するにあたって CI も導入できました。いままで netlify とまた別の CI を採用してたので CI の一本化ができ、わかりやすくなりました。\n","date":"2018-07-30T12:00:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/renewal/thumbnail.png","permalink":"https://ress.39.gy/post/renewal/","title":"ブログ環境を整えた"},{"content":"最近 Qiita のトレンドやいつも見てるサイトで、情報収集について書かれてました。\n 皆さんはどんな方法で情報収集してますか？私はこんな感じです - Qiita Webデザイナーの私はこんな風に情報収集しています | Webクリエイターボックス  私も気になりなる ＆ 私のやり方をも発信したいと思ったので書きます!\n注意: 結構ポエム気味です\nTL;DR よく見るサイトの RSS/Atom Feed を取得してフィードリーダーで見ています。\nRSS Feed が配信していなサイトは Feed43を使って情報を収取し、Twitter の発信は Twitter Great RSSを使って RSS を生成してます!\n気になった記事や保存したい記事は Instapaperに保存して後から読むようにしてます。\n過去の私は 最初は Twitter を Tweetbotや TweetDeckを使ってジャンルごとにタイムラインを並べて情報を収集してました。\nそんな私に slack を試すきっかけが訪れました。\n一通り使えるようになって 便利! もっと活用しようと思い情報収集を slack に集結するようになりました。\n情報収集に疲れた私は 周りの環境が変化し1年半ほど使ってた slack を使わなくなりました。\nですが情報収集用に一人 slack を運用してましたが、slack を開くと読み込み時間が長く過去のデータを調べようと思うとログの制限があり不便でした。\nそこで情報収集を1回やめることにしました。\n情報収集に関して考え直してみた 一度情報収集やめて情報収集に関して考え直しました。\nそんなときに次の記事を見つけました。\nhttps://qiita.com/naga3/items/18079cd07c230e448cee\nそこで情報収集は かならなずやらないといけない や 何か崇高な行為 ではなく ただの娯楽 だと割り切れるようになりました。\nこれから私は 情報収集を考え直した結果これからは趣味としてやっていこうと思います。\nおまけ ちなみにフィードリーダーは Feedly-\u0026gt; inoreader-\u0026gt; Minifluxと変わっていきまた\nMiniflux は少し前まで PHP で実装されていました。 ですが最近 Go 言語で作り直されて使いやすくなりましたので、ぜひ皆さんも使ってください!\n","date":"2018-05-24T16:28:00+09:00","image":"https://res.cloudinary.com/dagsofv2s/image/upload/q_auto:good/blog/post/information-gathering/thumbnail.png","permalink":"https://ress.39.gy/post/information-gathering/","title":"私はこんなふうに情報収集しています!"}]